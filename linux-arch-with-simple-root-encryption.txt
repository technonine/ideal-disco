# Install ARCH Linux with encrypted file-system and UEFI on USB
# If you wish to know more information about any of the commands here, check the sources at the bottom

# Download the archiso image from https://www.archlinux.org/
# Copy to a usb-drive
	dd if=/path/to/archlinux/iso of=/dev/sdX bs=8M && sync # on linux

# on windows I recommend using rufus (https://rufus.akeo.ie/)
	open rufus, select the right usb and iso (disk button at the bottom right), copy using dd

#Reboot your pc from the usb (if you cannot boot the system from the usb, check that secure boot is disabled from the bios and 		try enabling booting from usb). 

# Set up a wifi connection, if you are wired skip to the test connection part. 
	iw dev #check the interface of your wireless card.
	ip link set interface up
	iw dev interface scan | less #check for the correct ssid. 

	#for an open connection:
	iw dev interface connect "your ssid"

	#for a wpa-psk connection:
	wpa_supplicant -Bi interface -c <(wpa_passphrase "your ssid" "password")

	#request an ip from the router:
	dhcpcd interface.

	# test connection:
	ping -c 3 www.github.com

# if you cannot reach the address, check the sources below for setting up an internet connection.

# set the correct time
	timedatectl list-timezones #to find your timezone if you dont know it.
	timedatectl set-timezone [timezone]
	timedatectl set-ntp true

#to find the correct disk and uuids
lsblk -f

#TODO a low lv way of creating a new disk.

#alternately, a simpler method using cfdisk:
wipefs --all /dev/sdX
cfdisk /dev/sdX
# Select GPT and then create a first primary partition of 100M, set the type to EFI partition
# create a second partition of 250M and a third with the leftover space, both as a linux file system.
# write the filesystem and quit.

#format the first and second partition accordingly
mkfs.vfat -F32 /dev/sdX1
mkfs.ext2 /dev/sdX2

# Setup the encryption of the system
cryptsetup -v luksFormat -y --use-random -s 512 --type luks2 /dev/sdX3
cryptsetup luksOpen /dev/sdX3 luks

# Create filesystems on encrypted partitions
mkfs.ext4 /dev/mapper/luks

# Mount the new system 
mount /dev/mapper/luks /mnt # /mnt is the installed system
mkdir /mnt/boot
mount /dev/sdX2 /mnt/boot
mkdir /mnt/boot/efi
mount /dev/sdX1 /mnt/boot/efi

# Thing I use for a fully functional system. everything after efibootmgr is not required and can be altered to your situation. 
pacstrap /mnt base base-devel grub-efi-x86_64 efibootmgr zsh git dialog wpa_supplicant python3 python-pip xorg xfce4 intel-ucode 

# 'install' fstab
genfstab -pU /mnt >> /mnt/etc/fstab
# Make /tmp a ramdisk (add the following line to /mnt/etc/fstab)
echo "tmpfs	/tmp	tmpfs	defaults,noatime,mode=1777	0	0" >> /mnt/etc/fstab
# Change relatime on all non-boot partitions to noatime 
# reduces wear if using an SSD by not writing down the acces time everytime a file is read. 

# Enter the new system
arch-chroot /mnt /bin/bash

# Setup system clock
#replace Europe/Amsterdam by the same zone you entered when setting the time in the beginning
rm /etc/localtime
ln -s /usr/share/zoneinfo/Europe/Amsterdam /etc/localtime 
hwclock --systohc --utc

# Set the hostname
echo MYHOSTNAME > /etc/hostname

# Update locale
# uncomment en_US.UTF-8 and other things you need from /etc/locale.gen and run:
locale-gen
#add additional things
echo LANG=en_US.UTF-8 >> /etc/locale.conf
echo LANGUAGE=en_US >> /etc/locale.conf

# Set password for root
passwd

# Configure mkinitcpio with modules needed for the initrd image
vim /etc/mkinitcpio.conf
# Add 'ext4' to MODULES
# Look at block in HOOKS and Add 'keyboard' before it and 'encrypt' after it (add 'keymap' after keyboard if you do not have default US keymapping). ... keyboard block encrypt filesystem ...
# And regenerate the image:
mkinitcpio -p linux

# Setup grub
grub-install --removable
# In /etc/default/grub edit the line GRUB_CMDLINE_LINUX 
nano /etc/default/grub
#change the line to: GRUB_CMDLINE_LINUX="cryptdevice=UUID=device-UUID:cryptroot root=/dev/mapper/cryptroot"
# here device-uuid is the uuid tag of the actual partition /dev/sdX3 (the crypto_LUKS partition), you can find it quickly by opening a second tty and typing lsblk -f.
grub-mkconfig -o /boot/grub/grub.cfg

# Exit new system and go into the cd shell
exit

# Unmount all partitions
umount -R /mnt

#shutdown and try booting into the new system, don't forget to remove the cd/usb
shutdown now

#sources:
# https://wiki.archlinux.org/index.php/Installation_guide
# https://wiki.archlinux.org/index.php/Network_configuration #for wired devices
# https://wiki.archlinux.org/index.php/Wireless_network_configuration #for wireless devices.
# https://jlk.fjfi.cvut.cz/arch/manpages/man/timedatectl.1 #setting time and date command
# https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_an_entire_system#Simple_partition_layout_with_LUKS
# https://wiki.archlinux.org/index.php/Dm-crypt/Device_encryption#Encryption_options_for_LUKS_mode
# https://wiki.archlinux.org/index.php/GRUB
# https://wiki.archlinux.org/index.php/GRUB/Tips_and_tricks#Alternative_installation_methods
# https://wiki.archlinux.org/index.php/Fstab
